(declare-fun RGain12_0 () Real)
(declare-fun RGain11_0 () Real)
(declare-fun RGain12_1 () Real)
(declare-fun RGain11_1 () Real)
(assert (forall ((x1_0 Real)
         (z1_0 Real)
         (x2_0 Real)
         (z2_0 Real)
         (attackOnU1_0 Real)
         (attackOnY1_0 Real)
         (attackOnU1_1 Real)
         (attackOnY1_1 Real))
  (let ((a!1 (- (- (* (+ (/ 80151.0 5000.0) RGain11_0) z1_0))
                (* (+ (/ 28311.0 5000.0) RGain12_0) z2_0))))
  (let ((a!2 (+ (* 0.0 attackOnY1_0)
                (* 1.0 x1_0)
                (* 0.0 x2_0)
                (* 0.0 (+ a!1 (* 0.0 attackOnU1_0)))))
        (a!4 (+ (* 1.0 x1_0)
                (* (/ 1.0 10.0) x2_0)
                (* (/ 1.0 200.0) (+ a!1 (* 0.0 attackOnU1_0)))))
        (a!5 (+ (* 0.0 x1_0)
                (* 1.0 x2_0)
                (* (/ 1.0 10.0) (+ a!1 (* 0.0 attackOnU1_0))))))
  (let ((a!3 (- (- (- a!2 (* 1.0 z1_0)) (* 0.0 z2_0)) (* 0.0 a!1))))
  (let ((a!6 (+ (* 1.0 z1_0)
                (* (/ 1.0 10.0) z2_0)
                (* (/ 1.0 200.0) a!1)
                (* (/ 4951.0 5000.0) a!3)))
        (a!7 (+ (* 0.0 z1_0)
                (* 1.0 z2_0)
                (* (/ 1.0 10.0) a!1)
                (* (/ 2473.0 2500.0) a!3))))
  (let ((a!8 (- (- (* (+ (/ 80151.0 5000.0) RGain11_1) a!6))
                (* (+ (/ 28311.0 5000.0) RGain12_1) a!7))))
  (let ((a!9 (+ (* 0.0 attackOnY1_1)
                (* 1.0 a!4)
                (* 0.0 a!5)
                (* 0.0 (+ a!8 (* 0.0 attackOnU1_1)))))
        (a!11 (+ (* 1.0 a!4)
                 (* (/ 1.0 10.0) a!5)
                 (* (/ 1.0 200.0) (+ a!8 (* 0.0 attackOnU1_1)))))
        (a!13 (+ (* 0.0 a!4)
                 (* 1.0 a!5)
                 (* (/ 1.0 10.0) (+ a!8 (* 0.0 attackOnU1_1))))))
  (let ((a!10 (- (- (- a!9 (* 1.0 a!6)) (* 0.0 a!7)) (* 0.0 a!8))))
  (let ((a!12 (+ (* 1.0 a!6)
                 (* (/ 1.0 10.0) a!7)
                 (* (/ 1.0 200.0) a!8)
                 (* (/ 4951.0 5000.0) a!10)))
        (a!14 (+ (* 0.0 a!6)
                 (* 1.0 a!7)
                 (* (/ 1.0 10.0) a!8)
                 (* (/ 2473.0 2500.0) a!10))))
  (let ((a!15 (and (< (ite (< a!4 0.0) (* (- 1.0) a!4) a!4) 25.0)
                   (< (ite (< a!6 0.0) (* (- 1.0) a!6) a!6) 25.0)
                   (< (ite (< a!5 0.0) (* (- 1.0) a!5) a!5) 30.0)
                   (< (ite (< a!7 0.0) (* (- 1.0) a!7) a!7) 30.0)
                   (< (ite (< a!11 0.0) (* (- 1.0) a!11) a!11)
                      (/ 7500000000000001.0 1000000000000000.0))
                   (< (ite (< a!12 0.0) (* (- 1.0) a!12) a!12)
                      (/ 7500000000000001.0 1000000000000000.0))
                   (< (ite (< a!13 0.0) (* (- 1.0) a!13) a!13)
                      (/ 4500000000000001.0 500000000000000.0))
                   (< (ite (< a!14 0.0) (* (- 1.0) a!14) a!14)
                      (/ 4500000000000001.0 500000000000000.0)))))
    (=> (and (or (= x1_0 (/ 35.0 2.0)) (= x1_0 (- (/ 35.0 2.0))))
             (<= z1_0 (/ 35.0 2.0))
             (>= z1_0 (- (/ 35.0 2.0)))
             (or (= x2_0 21.0) (= x2_0 (- 21.0)))
             (<= z2_0 21.0)
             (>= z2_0 (- 21.0))
             (= attackOnU1_0 0.0)
             (<= (* a!3 a!3) (/ 10965567.0 200000.0))
             (= attackOnY1_0 0.0)
             (= attackOnU1_1 0.0)
             (<= (* a!10 a!10) (/ 10965567.0 200000.0))
             (= attackOnY1_1 0.0))
        a!15))))))))))))
(check-smt)